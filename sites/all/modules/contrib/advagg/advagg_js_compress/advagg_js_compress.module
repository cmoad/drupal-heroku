<?php

/**
 * @file
 * Advanced CSS/JS aggregation js compression module.
 */

/**
 * Default value to see packer is enabled.
 */
define('ADVAGG_JS_COMPRESS_PACKER', FALSE);

/**
 * Default value to see what compressor to use. 0 is Disabled.
 */
define('ADVAGG_JS_COMPRESSOR', 0);

/**
 * Default value to see what compressor to use. 0 is Disabled.
 */
define('ADVAGG_JS_INLINE_COMPRESSOR', 0);

/**
 * Default value to if inline compression is used if page is not cacheable.
 */
define('ADVAGG_JS_INLINE_COMPRESS_IF_NOT_CACHEABLE', FALSE);

/**
 * Default value for the compression ratio test.
 */
define('ADVAGG_JS_COMPRESS_RATIO', 0.1);

/**
 * Default value for the compression ratio test.
 */
define('ADVAGG_JS_MAX_COMPRESS_RATIO', 0.9);

/**
 * Default value for per file compression settings.
 */
define('ADVAGG_JS_COMPRESSOR_FILE_SETTINGS', -1);

/**
 * Implementation of hook_menu
 */
function advagg_js_compress_menu() {
  $items = array();
  $file_path = drupal_get_path('module', 'advagg_js_compress');
  $config_path = advagg_admin_config_root_path();

  $items[$config_path . '/advagg/js-compress'] = array(
    'title' => 'JS Compression',
    'description' => 'Adjust JS Compression settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('advagg_js_compress_admin_settings_form'),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
    'file path' => $file_path,
    'file' => 'advagg_js_compress.admin.inc',
    'weight' => 10,
  );

  return $items;
}

/**
 * Implement hook_advagg_current_hooks_hash_array_alter.
 */
function advagg_js_compress_advagg_current_hooks_hash_array_alter(&$aggregate_settings) {
  $aggregate_settings['variables']['advagg_js_compressor'] = variable_get('advagg_js_compressor', ADVAGG_JS_COMPRESSOR);
  $aggregate_settings['variables']['advagg_js_compress_packer'] = variable_get('advagg_js_compress_packer', ADVAGG_JS_COMPRESS_PACKER);
  $aggregate_settings['variables']['advagg_js_max_compress_ratio'] = variable_get('advagg_js_max_compress_ratio', ADVAGG_JS_MAX_COMPRESS_RATIO);
  $aggregate_settings['variables']['advagg_js_compressor_file_settings'] = variable_get('advagg_js_compressor_file_settings', array());
}

/**
 * Implement hook_advagg_modify_js_pre_render_alter().
 *
 * Used compress inline js.
 */
function advagg_js_compress_advagg_modify_js_pre_render_alter(&$children, &$elements) {
  // Get variables.
  $aggregate_settings['variables']['advagg_js_compressor'] = variable_get('advagg_js_inline_compressor', ADVAGG_JS_INLINE_COMPRESSOR);
  $aggregate_settings['variables']['advagg_js_max_compress_ratio'] = variable_get('advagg_js_max_compress_ratio', ADVAGG_JS_MAX_COMPRESS_RATIO);

  // Do nothing if the compressor is disabled.
  if (empty($aggregate_settings['variables']['advagg_js_compressor'])) {
    return;
  }

  // Do nothing if the page is not cacheable and inline compress if not
  // cacheable is not checked.
  if (!variable_get('advagg_js_inline_compress_if_not_cacheable', ADVAGG_JS_INLINE_COMPRESS_IF_NOT_CACHEABLE) && !drupal_page_is_cacheable()) {
    return;
  }

  // Compress any inline JS.
  module_load_include('inc', 'advagg_js_compress', 'advagg_js_compress.advagg');
  foreach ($children as $key => &$values) {
    if (!empty($values['#value'])) {
      $contents = $values['#value'];
      $filename = drupal_hash_base64($contents);
      advagg_js_compress_prep($contents, $filename, $aggregate_settings, FALSE);
      $values['#value'] = $contents;
    }
  }
}

/**
 * Test a file, making sure it is compressible.
 *
 * @param $filename
 *   Path and filename of the js file to test.
 * @param $compressors
 *   List of compressors to test.
 * @return
 *   Array showing the results of the compression tests.
 */
function advagg_js_compress_test_file($filename, $compressors) {
  $contents = file_get_contents($filename);
  // Get the JS string length before the compression operation.
  $contents_before = $contents;
  $before = strlen($contents);

  module_load_include('inc', 'advagg_js_compress', 'advagg_js_compress.advagg');

  $results = array();
  foreach ($compressors as $key => $name) {
    $contents = $contents_before;
    $aggregate_settings['variables']['advagg_js_compressor'] = $key;
    $aggregate_settings['variables']['advagg_js_max_compress_ratio'] = variable_get('advagg_js_max_compress_ratio', ADVAGG_JS_MAX_COMPRESS_RATIO);

    // Compress it.
    advagg_js_compress_prep($contents, $filename, $aggregate_settings, FALSE, FALSE, FALSE);
    $after = strlen($contents);

    $ratio = 0;
    if ($before != 0) {
      $ratio = ($before - $after) / $before;
    }
    // Set to "-2" if compression ratio sucks (it's already compressed).
    if ($ratio < variable_get('advagg_js_compress_ratio', ADVAGG_JS_COMPRESS_RATIO)) {
      $results[$key] = array('code' => -2, 'ratio' => round($ratio, 5), 'name' => $name);
    }
    // Set to "-3" if the compression ratio is way too good (bad js output).
    elseif ($ratio > variable_get('advagg_js_max_compress_ratio', ADVAGG_JS_MAX_COMPRESS_RATIO)) {
      $results[$key] = array('code' => -3, 'ratio' => round($ratio, 5), 'name' => $name);
    }
    // Set to "1". Everything worked, mark this file as compressible.
    else {
      $results[$key] = array('code' => 1, 'ratio' => round($ratio, 5), 'name' => $name);
    }
  }
  return $results;
}

/**
 * Test a JS file to see if it compresses well; called from httprl background.
 *
 * @param $filename
 *   Path and filename of JS file.
 */
function advagg_js_compress_run_test_httprl($filename) {
  module_load_include('inc', 'advagg_js_compress', 'advagg_js_compress.advagg');
  return advagg_js_compress_run_test($filename);
}
